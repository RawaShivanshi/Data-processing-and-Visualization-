# -*- coding: utf-8 -*-
"""mlworkshop.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u4toIlW54v00D3KohCgiXARSJl7CB9Y4
"""

#importing the libraries
import pandas as pd
import numpy as np

#reading the dataset
df=pd.read_csv("/content/drive/MyDrive/MLworkshop/Salary_2.csv") #change the file path here.
df

df.info

df.shape

# Import label encoder
from sklearn import preprocessing
# label_encoder object knows how to understand word labels.
label_encoder = preprocessing.LabelEncoder()
# Encode labels in column 'Country'.
df['Country']= label_encoder.fit_transform(df['Country'])
print(df.head())

# importing one hot encoder
from sklearn.preprocessing import OneHotEncoder
# creating one hot encoder object
onehotencoder = OneHotEncoder()
#reshape the 1-D country array to 2-D as fit_transform expects 2-D and finally fit the object
X = onehotencoder.fit_transform(df.Country.values.reshape(-1,1)).toarray()
#To add this back into the original dataframe
dfOneHot = pd.DataFrame(X, columns = ["Country_"+str(int(i)) for i in range(df.shape[1])])
df = pd.concat([df, dfOneHot], axis=1)
#droping the country column
df= df.drop(['Country'], axis=1)
#printing to verify
print(df.head())

import pandas as pd
import matplotlib.pyplot as plt
#Matplotlib is a python library used to create 2D graphs and plots by using python scripts.
#It has a module named pyplot which makes things easy for plotting by providing feature to control line styles, font properties, formatting axes etc
# Load the Dataset
df = pd.read_csv('/content/drive/MyDrive/MLworkshop/AmesHousing_2.csv')
# Single out a couple of predictor variables and labels ('SalePrice' is our target label set)
x = df[['Gr Liv Area', 'Overall Qual']].values
y = df['SalePrice'].values

fig, ax = plt.subplots(ncols=2, figsize=(12, 4))

ax[0].scatter(x[:,0], y)
ax[1].scatter(x[:,1], y)

plt.show()

fig, ax = plt.subplots(figsize=(12, 4))

ax.scatter(x[:,0], y)
ax.scatter(x[:,1], y)

fig, ax = plt.subplots(figsize=(12, 4))

ax.hist(x[:,0])
ax.hist(x[:,1])

#standard scalar class

import pandas as pd
import matplotlib.pyplot as plt
# Import StandardScaler
from sklearn.preprocessing import StandardScaler

fig, ax = plt.subplots(figsize=(12, 4))

scaler = StandardScaler()
x_std = scaler.fit_transform(x)

ax.hist(x_std[:,0])
ax.hist(x_std[:,1])

fig, ax = plt.subplots(figsize=(12, 4))

scaler = StandardScaler()
x_std = scaler.fit_transform(x)

ax.scatter(x_std[:,0], y)
ax.scatter(x_std[:,1], y)

from sklearn.preprocessing import MinMaxScaler

#figsize is a tuple of the width and height of the figure in inches
fig, ax = plt.subplots(figsize=(12, 4))

scaler = MinMaxScaler()
x_minmax = scaler.fit_transform(x)

ax.hist(x_minmax [:,0])
ax.hist(x_minmax [:,1])

fig, ax = plt.subplots(figsize=(12, 4))

scaler = MinMaxScaler()
x_minmax = scaler.fit_transform(x)

ax.scatter(x_minmax [:,0], y)
ax.scatter(x_minmax [:,1], y)

# Commented out IPython magic to ensure Python compatibility.
# Pandas for managing datasets
import pandas as pd
# Matplotlib for additional customization
from matplotlib import pyplot as plt
# %matplotlib inline
# Seaborn for plotting and styling
import seaborn as sns
sns.set(rc = {'figure.figsize':(15,8)})

# Read dataset
df = pd.read_csv('/content/drive/MyDrive/MLworkshop/Pokemon_1.csv',encoding='latin1' , index_col=0)#change the path here

# Display first 5 observations
df.head()

# Recommended way
sns.set(rc = {'figure.figsize':(15,8)})
#lmplot() method is used to draw a scatter plot onto a FacetGrid
sns.lmplot(x='Defense', y='Attack', data=df)

# Alternative way
# sns.lmplot(x=df.Defense, y=df.Attack)

# Scatterplot arguments
sns.lmplot(x='Attack', y='Defense', data=df,
           fit_reg=False, # No regression line
           hue='Stage')   # Color by evolution stage

# Boxplot
sns.boxplot(data=df)

# Pre-format DataFrame
stats_df = df.drop(['Stage', 'Legendary'], axis=1)

# New boxplot using stats_df
sns.boxplot(data=stats_df)

# Set theme
sns.set_style('whitegrid')

# Violin plot
sns.violinplot(x='Type 1', y='Attack', data=df)

pkmn_type_colors = ['#78C850',  # Grass
                    '#F08030',  # Fire
                    '#6890F0',  # Water
                    '#A8B820',  # Bug
                    '#A8A878',  # Normal
                    '#A040A0',  # Poison
                    '#F8D030',  # Electric
                    '#E0C068',  # Ground
                    '#EE99AC',  # Fairy
                    '#C03028',  # Fighting
                    '#F85888',  # Psychic
                    '#B8A038',  # Rock
                    '#705898',  # Ghost
                    '#98D8D8',  # Ice
                    '#7038F8',  # Dragon
                   ]

# Violin plot with Pokemon color palette
sns.violinplot(x='Type 1', y='Attack', data=df,
               palette=pkmn_type_colors) # Set color palette

# Swarm plot with Pokemon color palette
sns.swarmplot(x='Type 1', y='Attack', data=df,
              palette=pkmn_type_colors)

# Calculate correlations
corr = stats_df.corr()

# Heatmap
sns.heatmap(corr)

# Distribution Plot (a.k.a. Histogram)
sns.histplot(df.Attack)

# Count Plot (a.k.a. Bar Plot)
sns.countplot(x='Type 1', data=df, palette=pkmn_type_colors)

# Rotate x-labels
plt.xticks(rotation=-45)

# Factor Plot
g = sns.catplot(x='Type 1',
                   y='Attack',
                   data=df,
                   hue='Stage',  # Color by stage
                   col='Stage',  # Separate by stage
                   kind='violin') # Swarmplot

# Rotate x-axis labels
g.set_xticklabels(rotation=-45)

# Doesn't work because only rotates last plot
# plt.xticks(rotation=-45)

# Density Plot
sns.kdeplot(df.Attack)
sns.kdeplot(df.Defense)

# Joint Distribution Plot
sns.jointplot(x='Attack', y='Defense', data=df)